# -*- coding: utf-8 -*-
"""Movie Recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fvsCGGaTWWHd2id6_U0JFPIlxG4jkMNf
"""



"""Import Dependencies

"""

import numpy as np
import pandas as pd
import difflib 
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""Data Collection &Pre Processing"""

#loading data from csv file to pandas dataframe
movies_data = pd.read_csv('/content/movies.csv')

#Printing first five rows of dataframe
movies_data.head()

movies_data.tail()

#number of rows and coloumns
movies_data.shape

#selecting relevant features for recommendation
selected_features = ['genres', 'keywords', 'tagline', 'cast', 'director']
print(selected_features)

#replacing nulll values witth null string

for feature in selected_features:
   movies_data[feature] = movies_data[feature].fillna('')

#combining all the 5 selected features
combined_features = movies_data['genres']+' '+movies_data['keywords']+' '+movies_data['tagline']+' '+movies_data['cast']+' '+movies_data['director']

print(combined_features)

vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

print(feature_vectors)

"""Cosine Similarity"""

#getting similarity scores sing cosine similarity 

similarity = cosine_similarity(feature_vectors)

print(similarity)

similarity.shape

#getting movie name from user

movie_name = input('Enter your favorite movie name: ')

#creating a list with all the movie names given in the dataset

list_of_all_titles = movies_data['title'].tolist()
print(list_of_all_titles)

#finding the close match for the name of movie given by user

find_close_match = difflib.get_close_matches(movie_name,list_of_all_titles)
print(find_close_match)

close_match = find_close_match [0]
print(close_match)

#find index of movie with title

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]
print(index_of_the_movie)

#getting list of similar movies

similarity_score = list(enumerate(similarity[index_of_the_movie]))
print(similarity_score)

len(similarity_score)

#sorting the movies based on thier similarities score

sorted_similar_movies = sorted(similarity_score, key =lambda x:x [1],reverse = True)
print(sorted_similar_movies)

#print the name of similar movies based on the index
print('Movies suggested for you: \n')
 
i = 1

for movie in sorted_similar_movies:
   index = movie[0]
   title_from_index = movies_data[movies_data.index == index]['title'].values[0]
   if (i<10):
     print(i, '.', title_from_index)
     i+=1

movie_name = input('Enter your favourite movie : ')

list_of_all_titles = movies_data['title'].tolist()

find_close_match = difflib.get_close_matches(movie_name,list_of_all_titles)

close_match = find_close_match [0]

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]

similarity_score = list(enumerate(similarity[index_of_the_movie]))

sorted_similar_movies = sorted(similarity_score, key =lambda x:x [1],reverse = True)

print('Movies suggested for you: \n')
 
i = 1

for movie in sorted_similar_movies:
   index = movie[0]
   title_from_index = movies_data[movies_data.index == index]['title'].values[0]
   if (i<20):
     print(i, '.', title_from_index)
     i+=1